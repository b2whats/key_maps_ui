@import "../lib/variables";


html {
  font-size: 16px;
}

body {
  background-color: $light;
  color: $dark;
  font-family: $default-font;
  font-size: 1rem;
  line-height: 1.7;
}

.App {}

.wrapper {
  margin-bottom: grid(7);
}

a {
  color: inherit;
  cursor: pointer;
}

h2 {
  font-weight: 300;
  opacity: .75;
}


/**
 * Notifications
 */
:global(.redux-toastr) {
  pointer-events: none;
  /* ^ temporary -> https://github.com/diegoddox/react-redux-toastr/issues/44 */

  position: fixed;
  right: grid(2);
  top: grid(2);
  width: rem(350px);
  z-index: 99999;

  & :global(.confirm-holder) {
    display: none;
  }

  & :global(.toastr) {
    background-color: black;
    border-radius: $border-radius;
    color: #999;
    margin-bottom: grid(1);
    opacity: 0;
    padding: grid(1.5) grid(2);
    position: relative;
    transition: opacity 500ms;

    & :global(.message-holder) {
      font-weight: 600;
      line-height: 1.45;
    }

    &:global(.success),
    &:global(.warning),
    &:global(.error) {
      color: rgba(0, 0, 0, 0.575);
    }

    &:global(.info) {}
    &:global(.success) { background-color: $green; }
    &:global(.warning) { background-color: $yellow; }
    &:global(.error) { background-color: $red; }

    &:global(.bounceIn),
    &:global(.fadeIn) {
      opacity: 1;
    }

    &:global(.bounceOut),
    &:global(.fadeOut) {
      opacity: 0;
    }
  }

}


/**
 * Loader
 */
:global(#loader) {
  background-color: $light;
  bottom: 0;
  display: none;
  left: 0;
  opacity: 0;
  pointer-events: none;
  position: fixed;
  right: 0;
  top: 0;
  transition: 500ms opacity;
  z-index: 9999999999;

  & :global(.loader) {
    left: 50%;
    position: absolute;
    top: 48%;

    &:after {
      content: "loading ...";
      font-size: .825em;
      left: 50%;
      letter-spacing: .05em;
      position: absolute;
      text-transform: uppercase;
      top: 47px;
      transform: translateX(-50%);
      white-space: nowrap;
    }
  }

  & :global(.loader-inner > div) {
    border-color: $dark;
  }
}


:global(body.show-loader #loader) { display: block; }
:global(body.fadein-loader #loader) { opacity: 1; }
